# Generated by Django 5.2.4 on 2025-07-10 20:26

import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import users.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('CLIENT', 'Client'), ('GESTIONNAIRE', 'Gestionnaire'), ('SUPER_ADMIN', 'Super Admin')], default='CLIENT', max_length=20, verbose_name='Rôle')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('telephone', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator(message="Format: '+999999999'. 9 à 15 chiffres autorisés.", regex='^\\+?1?\\d{9,15}$')])),
                ('date_naissance', models.DateField(blank=True, null=True)),
                ('photo_profil', models.ImageField(blank=True, null=True, upload_to='users/photos/')),
                ('adresse', models.CharField(blank=True, max_length=255)),
                ('ville', models.CharField(blank=True, max_length=100)),
                ('code_postal', models.CharField(blank=True, max_length=10)),
                ('pays', models.CharField(default='France', max_length=100)),
                ('email_verifie', models.BooleanField(default=False)),
                ('telephone_verifie', models.BooleanField(default=False)),
                ('identite_verifiee', models.BooleanField(default=False)),
                ('newsletter', models.BooleanField(default=True)),
                ('notifications_email', models.BooleanField(default=True)),
                ('notifications_sms', models.BooleanField(default=False)),
                ('date_derniere_connexion_complete', models.DateTimeField(blank=True, null=True)),
                ('ip_derniere_connexion', models.GenericIPAddressField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'permissions': [('can_view_maisons', 'Peut consulter les maisons'), ('can_make_reservation', 'Peut faire des réservations'), ('can_give_review', 'Peut donner des avis'), ('can_manage_clients', 'Peut gérer les clients'), ('can_manage_maisons', 'Peut gérer les maisons'), ('can_manage_reservations', 'Peut gérer les réservations'), ('can_generate_pdf', 'Peut générer des PDFs'), ('can_view_statistics', 'Peut voir les statistiques'), ('can_manage_system', 'Peut gérer le système')],
            },
            managers=[
                ('objects', users.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PasswordResetToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('is_used', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Token de réinitialisation',
                'verbose_name_plural': 'Tokens de réinitialisation',
            },
        ),
        migrations.CreateModel(
            name='ProfilClient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_sejour_prefere', models.CharField(blank=True, choices=[('business', 'Professionnel'), ('leisure', 'Loisirs'), ('family', 'Famille'), ('couple', 'Couple'), ('friends', 'Entre amis')], max_length=50)),
                ('nombre_sejours', models.PositiveIntegerField(default=0)),
                ('note_moyenne', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('nombre_evaluations', models.PositiveIntegerField(default=0)),
                ('piece_identite', models.FileField(blank=True, upload_to='users/documents/')),
                ('langue_preferee', models.CharField(default='fr', max_length=10)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profil_client', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profil Client',
                'verbose_name_plural': 'Profils Clients',
            },
        ),
        migrations.CreateModel(
            name='ProfilGestionnaire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('siret', models.CharField(blank=True, help_text='Numéro SIRET si professionnel', max_length=14)),
                ('raison_sociale', models.CharField(blank=True, max_length=200)),
                ('iban', models.CharField(blank=True, max_length=34)),
                ('bic', models.CharField(blank=True, max_length=11)),
                ('piece_identite', models.FileField(blank=True, upload_to='users/documents/')),
                ('justificatif_domicile', models.FileField(blank=True, upload_to='users/documents/')),
                ('kbis', models.FileField(blank=True, help_text='Pour les professionnels', upload_to='users/documents/')),
                ('note_moyenne', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('nombre_evaluations', models.PositiveIntegerField(default=0)),
                ('verifie', models.BooleanField(default=False)),
                ('auto_acceptation', models.BooleanField(default=False, help_text='Acceptation automatique des réservations')),
                ('delai_reponse_max', models.PositiveIntegerField(default=24, help_text='Délai de réponse en heures')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profil_gestionnaire', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profil Gestionnaire',
                'verbose_name_plural': 'Profils Gestionnaires',
            },
        ),
        migrations.CreateModel(
            name='TokenVerificationEmail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('is_used', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Token de vérification email',
                'verbose_name_plural': 'Tokens de vérification email',
            },
        ),
    ]
