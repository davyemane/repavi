# ==========================================
# apps/facturation/signals.py - FACTURATION PAR TRANCHE
# ==========================================
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.contrib.auth import get_user_model
from django.core.mail import send_mail
from django.conf import settings
from django.db.models import Sum
from datetime import datetime, timedelta
from decimal import Decimal
import logging

from apps.reservations.models import Reservation
from apps.paiements.models import EcheancierPaiement
from .models import Facture, ParametresFacturation

logger = logging.getLogger(__name__)
User = get_user_model()


@receiver(post_save, sender=EcheancierPaiement)
def creer_facture_apres_chaque_paiement(sender, instance, created, **kwargs):
    """
    Cr√©e une facture √† chaque paiement effectu√© (acompte OU solde)
    """
    # Ne traiter que les paiements qui viennent d'√™tre marqu√©s comme pay√©s
    if instance.statut != 'paye':
        return
    
    try:
        # V√©rifier si une facture existe d√©j√† pour ce paiement sp√©cifique
        try:
            facture_existante = Facture.objects.get(echeance_paiement=instance)
            logger.info(f"Facture {facture_existante.numero} existe d√©j√† pour le paiement {instance.pk}")
            return
        except Facture.DoesNotExist:
            # Pas de facture pour ce paiement, continuer
            pass
        
        # R√©cup√©rer les param√®tres
        parametres = ParametresFacturation.get_parametres()
        
        # Cr√©er la facture pour ce paiement sp√©cifique
        facture = Facture.objects.create(
            echeance_paiement=instance,
            date_echeance=datetime.now().date() + timedelta(days=parametres.delai_paiement_jours),
            notes=f"Facture g√©n√©r√©e automatiquement pour {instance.get_type_paiement_display().lower()} le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}",
            statut='payee',  # Directement pay√©e puisque paiement effectu√©
            cree_par=None  # Cr√©ation automatique
        )
        
        # Calculer le contexte du paiement (soldes avant/apr√®s)
        facture.calculer_contexte_paiement()
        facture.save()
        
        logger.info(f"‚úÖ Facture {facture.numero} cr√©√©e pour {instance.get_type_paiement_display()} de {instance.montant_paye} FCFA")
        
        # Notifier les gestionnaires
        notifier_facture_generee(facture)
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la cr√©ation de facture pour le paiement {instance.pk}: {e}")
        import traceback
        traceback.print_exc()


def notifier_facture_generee(facture):
    """
    Notifie les gestionnaires qu'une facture a √©t√© g√©n√©r√©e
    """
    try:
        gestionnaires = User.objects.filter(
            profil__in=['gestionnaire', 'super_admin'],
            is_active=True,
            email__isnull=False
        ).exclude(email='')
        
        if gestionnaires.exists():
            # D√©terminer si c'est le paiement final
            est_final = facture.est_paiement_final
            type_paiement = facture.get_type_facture_display()
            
            sujet = f"RepAvi Lodges - Facture {type_paiement} {facture.numero}"
            
            # Message d√©taill√©
            message = f"""
Nouvelle facture g√©n√©r√©e automatiquement :

Facture : {facture.numero}
Type : {type_paiement}
Client : {facture.client.nom} {facture.client.prenom}
R√©servation : #{facture.reservation.pk}
Appartement : {facture.reservation.appartement.numero}

PAIEMENT :
‚Ä¢ Montant pay√© : {facture.montant_paiement} FCFA
‚Ä¢ Date paiement : {facture.echeance_paiement.date_paiement}
‚Ä¢ Mode : {facture.echeance_paiement.get_mode_paiement_display() or 'Non sp√©cifi√©'}

SITUATION :
‚Ä¢ Solde avant : {facture.solde_avant_paiement} FCFA
‚Ä¢ Solde apr√®s : {facture.solde_apres_paiement} FCFA
{'‚Ä¢ üéâ R√âSERVATION ENTI√àREMENT PAY√âE !' if est_final else '‚Ä¢ ‚è≥ Solde restant √† payer'}

P√©riode : du {facture.reservation.date_arrivee} au {facture.reservation.date_depart}

üìÑ T√©l√©charger PDF : /facturation/{facture.pk}/pdf/

RepAvi Lodges
            """
            
            emails_gestionnaires = [g.email for g in gestionnaires]
            
            send_mail(
                subject=sujet,
                message=message,
                from_email=getattr(settings, 'DEFAULT_FROM_EMAIL', 'noreply@repavilodges.com'),
                recipient_list=emails_gestionnaires,
                fail_silently=True
            )
            
            logger.info(f"üìß Notification envoy√©e pour facture {type_paiement} {facture.numero}")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur notification facture {facture.numero}: {e}")


# Fonction utilitaire pour cr√©er manuellement une facture
def creer_facture_manuelle_paiement(echeance_paiement, user=None, **kwargs):
    """
    Cr√©e manuellement une facture pour un paiement sp√©cifique
    """
    try:
        # V√©rifier qu'il n'y a pas d√©j√† une facture pour ce paiement
        try:
            facture_existante = Facture.objects.get(echeance_paiement=echeance_paiement)
            raise ValueError(f"Une facture existe d√©j√† pour ce paiement: {facture_existante.numero}")
        except Facture.DoesNotExist:
            pass
        
        # V√©rifier que le paiement est pay√©
        if echeance_paiement.statut != 'paye':
            raise ValueError("Impossible de cr√©er une facture pour un paiement non effectu√©")
        
        parametres = ParametresFacturation.get_parametres()
        
        # Valeurs par d√©faut
        defaults = {
            'date_echeance': datetime.now().date() + timedelta(days=parametres.delai_paiement_jours),
            'notes': f"Facture cr√©√©e manuellement le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}",
            'statut': 'payee',
        }
        
        # Fusionner avec les kwargs fournis
        defaults.update(kwargs)
        
        facture = Facture.objects.create(
            echeance_paiement=echeance_paiement,
            cree_par=user,
            **defaults
        )
        
        # Calculer le contexte
        facture.calculer_contexte_paiement()
        facture.save()
        
        logger.info(f"üìã Facture {facture.numero} cr√©√©e manuellement pour paiement {echeance_paiement.pk}")
        return facture
        
    except Exception as e:
        logger.error(f"‚ùå Erreur cr√©ation facture manuelle pour paiement {echeance_paiement.pk}: {e}")
        raise


# Fonction de diagnostic
def diagnostic_factures_manquantes():
    """
    Trouve les paiements sans facture
    """
    paiements_sans_facture = EcheancierPaiement.objects.filter(
        statut='paye',
        facture__isnull=True
    )
    
    print(f"üîç {paiements_sans_facture.count()} paiements sans facture trouv√©s")
    
    for paiement in paiements_sans_facture:
        print(f"  - Paiement #{paiement.pk}: {paiement.get_type_paiement_display()} de {paiement.montant_paye} FCFA (R√©servation #{paiement.reservation.pk})")
    
    return paiements_sans_facture


def creer_factures_manquantes():
    """
    Cr√©e toutes les factures manquantes pour les paiements effectu√©s
    """
    paiements_sans_facture = diagnostic_factures_manquantes()
    
    factures_creees = 0
    erreurs = 0
    
    for paiement in paiements_sans_facture:
        try:
            facture = creer_facture_manuelle_paiement(
                echeance_paiement=paiement,
                notes=f"Facture cr√©√©e en lot pour paiement du {paiement.date_paiement}"
            )
            print(f"‚úÖ Facture {facture.numero} cr√©√©e pour paiement #{paiement.pk}")
            factures_creees += 1
            
        except Exception as e:
            print(f"‚ùå Erreur paiement #{paiement.pk}: {e}")
            erreurs += 1
    
    print(f"\nüìä R√âSULTAT: {factures_creees} factures cr√©√©es, {erreurs} erreurs")
    return factures_creees, erreurs